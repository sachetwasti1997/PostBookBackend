package com.sachet.postBook.security;

import com.sachet.postBook.configuration.AuthDetailsService;
import com.sachet.postBook.configuration.BasicAuthenticationEntryPoint;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.HttpStatusEntryPoint;

@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    private final AuthDetailsService authDetailsService;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public SecurityConfiguration(AuthDetailsService authDetailsService, PasswordEncoder passwordEncoder) {
        this.authDetailsService = authDetailsService;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        /**
         * By default spring security enables csrf, which is basically a token generated by backend, and it looks for
         * that token to be added in the subsequent requests.
         * WE WILL NOT USE IT.
         */
        http.csrf().disable();
        /**
         * by default for basic authentication spring security uses Entry Point implementation of
         * basicAuthenticationEntryPoint. This adds 'WWW-Authenticate' header to response in authentication fail cases
         */
        http.httpBasic().authenticationEntryPoint(new BasicAuthenticationEntryPoint());//this is authorisation logic

        /**
         * determining which endpoints will be secured and which wont be
         */

        http
                .authorizeRequests().antMatchers(HttpMethod.POST, "/api/1.0/login").authenticated()
                .and()
                .authorizeRequests().anyRequest().permitAll();
        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(authDetailsService).passwordEncoder(passwordEncoder);
    }
}
